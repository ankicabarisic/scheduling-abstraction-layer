
apply plugin: 'spring-boot'
apply plugin: 'com.github.kt3k.coveralls'
apply from: "$rootDir/gradle/ext/coding-format.gradle"
apply plugin: "io.spring.dependency-management"
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: "application"

group = 'org.ow2.proactive'

// Configure the maven repository deployment
install {
    repositories.mavenInstaller {
        // Set the version
        pom.version = version
        // Set the group/namespace for the maven repository deployment.
        pom.groupId = 'org.ow2.proactive'
        // Give the artifact a 'base name' (The version is added to the 'base name')
        pom.artifactId = 'scheduling-abstraction-layer'
    }
}

repositories {
    mavenCentral()
    maven { url 'http://repository.activeeon.com/content/groups/proactive/' }
}

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repository.activeeon.com/content/groups/proactive/' }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.8.RELEASE'
        classpath "com.diffplug.gradle.spotless:spotless:2.4.0"
        classpath "org.ow2.proactive:coding-rules:1.0.0"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.7.1'
        classpath "io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE"
    }

    dependencies {
        delete "gradle/ext"
        ant.unjar src: configurations.classpath.find { it.name.startsWith("coding-rules") }, dest: 'gradle/ext'
    }
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'project-report'

    group = 'org.ow2.proactive'
    version = version

    if (project.hasProperty('ci')) {
        configurations.all {
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        }
    }

    configurations.all {
        resolutionStrategy.force "org.ow2.proactive:sal:${version}"
    }

    rootProject.buildscript.repositories.each {
        repositories.add(it)
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                snapshotRepository(url: "http://repository.activeeon.com/content/repositories/snapshots/") {
                    authentication(userName: "${System.getProperty('nexusUsername')}",
                            password: "${System.getProperty('nexusPassword')}")
                }
                repository(url: "http://repository.activeeon.com/content/repositories/releases/") {
                    authentication(userName: "${System.getProperty('nexusUsername')}",
                            password: "${System.getProperty('nexusPassword')}")
                }
            }
        }
    }
}

bootRepackage {
    enabled = false
}

configurations {
    // The following module is excluded to avoid clashes when embedded inside the ProActive Scheduler
    all*.exclude module: 'spring-boot-starter-logging'

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}

ext {
    generatedSrcDir = "$projectDir/src/generated/java"
}

sourceSets {
    generated {
        java {
            srcDirs += generatedSrcDir
        }
    }

    main {
        java {
            srcDirs += generatedSrcDir
        }
    }

    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')

        compileClasspath = sourceSets.main.output + configurations.integrationTestCompile
        runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
    }
}

def mainClassName = 'org.ow2.proactive.sal.service.Application'

springBoot {
    mainClass = mainClassName
}

war {
    baseName = "scheduling-abstraction-layer"
    version = version
    manifest {
        attributes 'Main-Class': mainClassName
        attributes 'Class-Path': "."
    }
}

jar {
    baseName = 'scheduling-abstraction-layer'
    // Version is define in gradle.properties
    version =  version
    manifest {
        attributes 'Main-Class': mainClassName
        attributes 'Class-Path': "."
    }
}

dependencyManagement {
    imports {
        mavenBom "org.ow2.proactive:parent-bom:${version}"
    }
}

dependencies {
    compile project(":sal-common")

    compile "org.ow2.proactive:microservices-common:$version"

    compile 'org.projectlombok:lombok'
    compile 'commons-fileupload:commons-fileupload'

    //Logger
    compile 'org.apache.logging.log4j:log4j-web'
    compile 'org.apache.logging.log4j:log4j-core'
    compile 'org.apache.logging.log4j:log4j-web'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl'

    // This allows log4j logging for spring boot. This dependency is needed for standalone but will
    // clash with the ProActive Scheduler dependencies when included. It is excluded in configurations above.
    compile('org.springframework.boot:spring-boot-starter-log4j2') {
        exclude group: "org.apache.logging.log4j"
    }
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.hateoas:spring-hateoas'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    providedRuntime 'org.hsqldb:hsqldb'
    runtime('org.hibernate:hibernate-hikaricp') {
        exclude group: 'org.javassist', module: 'javassist'
    }

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    compile 'io.springfox:springfox-spring-web'
    compile 'io.springfox:springfox-swagger2'
    compile 'io.springfox:springfox-swagger-ui'
    compile 'com.google.guava:guava'

    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile 'com.fasterxml.jackson.core:jackson-annotations'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'

    testCompile 'org.hamcrest:hamcrest-junit'
    testCompile 'com.google.truth:truth'
    testCompile 'junit:junit'
    testCompile 'nl.jqno.equalsverifier:equalsverifier'
    testCompile 'org.mockito:mockito-core'

    testCompile 'com.google.code.gson:gson'
    testCompile 'com.jayway.restassured:rest-assured'
    testCompile 'org.springframework.boot:spring-boot-starter-test'

    compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.7'
    compile group: 'org.ow2.proactive_grid_cloud_portal', name: 'rest-smartproxy', version: "$version"
    compile group: 'org.ow2.proactive_grid_cloud_portal', name: 'rest-api', version: "$version"
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    compile group: 'org.jasypt', name: 'jasypt', version: '1.9.2'
    compile group: 'org.hibernate', name: 'hibernate-entitymanager'
    compile group: 'org.hibernate', name: 'hibernate-core'
    compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.1'
    compile group: 'org.json', name: 'json', version: '20200518'
    compile group: 'org.javatuples', name: 'javatuples', version: '1.2'
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.55'
    compile group: 'org.eclipse.emf', name: 'org.eclipse.emf.common', version: '2.20.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    compile group: 'org.apache.jclouds.api', name: 'ec2', version: '2.2.1'
    compile group: 'org.junit.jupiter', name:'junit-jupiter', version: '5.6.2'
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    classpath += sourceSets.test.runtimeClasspath

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoIntegrationTest.exec")
    }

    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    executionData test, integrationTest

    sourceSets project.sourceSets.main

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

clean {
    sourceSets.generated.java.srcDirs.each {
       srcDir -> delete srcDir
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

check.dependsOn integrationTest

jacocoTestReport.dependsOn check
tasks.coveralls.dependsOn jacocoTestReport

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

idea {
    module {
        testSourceDirs += file('src/integration-test/java')
        testSourceDirs += file('src/integration-test/resources')

        scopes.TEST.plus += [
                configurations.integrationTestCompile,
                configurations.integrationTestRuntime
        ]
    }
}
